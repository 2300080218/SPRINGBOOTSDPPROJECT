package com.klef.fsd.sdp.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.klef.fsd.sdp.dto.EventDTO;
import com.klef.fsd.sdp.model.BookEvent;
import com.klef.fsd.sdp.model.Event;
import com.klef.fsd.sdp.model.Manager;
import com.klef.fsd.sdp.service.ManagerService;

@RestController
@RequestMapping("/manager")
@CrossOrigin("*")
public class ManagerController 
{
	@Autowired
	   private ManagerService managerService;
		   
	   @PostMapping("/checkmanagerlogin")
	   public ResponseEntity<?> checkmanagerlogin(@RequestBody Manager manager) 
	   {
	       try 
	       {
	           Manager m = managerService.checkmanagerlogin(manager.getUsername(), manager.getPassword());

	           if (m!=null) 
	           {
	               return ResponseEntity.ok(m); // if login is successful
	           } 
	           else 
	           {
	               return ResponseEntity.status(401).body("Invalid Username or Password"); // if login is fail
	           }
	       } 
	       catch (Exception e) 
	       {
	           return ResponseEntity.status(500).body("Login failed: " + e.getMessage());
	       }
	   }
	   @GetMapping("/viewallservicemembers")
	   public ResponseEntity<List<ServiceMember>> viewallservicemembers()
	   {
	 	 List<ServiceMember> servicemembers =  managerService.displayservicemembers();
	 	 
	 	 return ResponseEntity.ok(servicemembers); // 200 - success
	   }
	   
	   @DeleteMapping("/deleteservicemember")
	   public ResponseEntity<String> deleteservicemember(@RequestParam int smid)
	   {
	 	  try
	 	  {
	 		  String output = managerService.deleteservicemember(smid);
	 		  return ResponseEntity.ok(output);
	 	  }
	 	  catch(Exception e)
	 	  {
	 		  return ResponseEntity.status(500).body("Failed to delete ServiceMember");
	 	  }
	   }
	   
	   @PostMapping("/addservicemember")
	   public ResponseEntity<String> addServiceMember(@RequestBody ServiceMember serviceMember)
	   {
	       try
	       {
	           String output = managerService.addservicemember(serviceMember); // assuming managerService handles this
	           return ResponseEntity.ok(output); // 200 - success
	       }
	       catch(Exception e)
	       {
	           return ResponseEntity.status(500).body("Failed to Add Service Member ... !!");
	       }
	   }

}